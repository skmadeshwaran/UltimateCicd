pipeline {
  agent {
    docker {
      image 'ultimate-cicd-pipeline:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // git branch: 'main', url: 'https://github.com/skmadeshwaran/UltimateCicd.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd UltimateCicd/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://18.191.44.65:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: '5e2158dea362fcd74437b018706008378ad83f64')]) {
          sh 'cd UltimateCicd/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$5e2158dea362fcd74437b018706008378ad83f64 -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ultimate-cicd-pipeline:v1"
        // DOCKERFILE_LOCATION = "UltimateCicd/java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile" // Uncomment and update if necessary
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd UltimateCicd/java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
  }
}
